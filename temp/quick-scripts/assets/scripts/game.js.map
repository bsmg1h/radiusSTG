{"version":3,"sources":["game.js"],"names":["cc","Class","extends","Component","properties","bulletPrefab","default","type","Prefab","enemyPrefab","bulletInterval","bulletSpeedCoefficient","bulletSpeedIntercept","w","spawnEnemy","log","positionX","randomMinus1To1","node","width","positionY","height","newEnemy","instantiate","addChild","setPosition","p","getComponent","init","test","onLoad","T","deltaT","i","newBullets","director","getCollisionManager","enabled","enabledDebugDraw","update","dt","shootNewBullet","onDisable","speedCoefficient","speedIntercept","speedAndTheta","bulletSpiralInitializer","speed","theta","Math","cos","sin","bulletRandomIsotropyInitializer","random0To1","PI"],"mappings":"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","file":"game.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        //加载子弹的Prefab素材\n        bulletPrefab:{\n            default: null,\n            type: cc.Prefab\n        },\n        enemyPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n        //两颗子弹的发射间隔\n        bulletInterval: 500,\n        //子弹速度斜率\n        bulletSpeedCoefficient: 500,\n        //子弹速度截距\n        bulletSpeedIntercept: 100,\n        //子弹发射角速度\n        w : 0.1\n    },\n    //test\n    spawnEnemy: function () {\n        cc.log(\"spawn new Enemy\");\n        var positionX = cc.randomMinus1To1() * this.node.width / 2;\n        var positionY = cc.randomMinus1To1() * this.node.height / 2;\n        var newEnemy = cc.instantiate(this.enemyPrefab);\n        this.node.addChild(newEnemy);\n        newEnemy.setPosition(cc.p(positionX, positionY));\n        // pass Game instance to star\n        newEnemy.getComponent('enemy').init(this);\n    },\n    test: function() {\n        this.node.width = 3;\n    },\n    // use this for initialization\n    onLoad: function () {\n        //总计时器\n        this.T = 0\n        //子弹间隔计时器\n        this.deltaT = 0;\n        //计数器\n        this.i = -1;\n        //存储子弹数组\n        this.newBullets = [];\n        //Generate Enemies\n        this.spawnEnemy();\n        // Collision System\n        cc.director.getCollisionManager().enabled = true;\n        cc.director.getCollisionManager().enabledDebugDraw = true;\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function (dt) {\n        this.T += dt;\n        this.deltaT += dt;\n        if (this.deltaT > this.bulletInterval){\n            //如果计时器大于子弹发射时间间隔，则发射子弹\n            //计数器加一\n            this.i += 1;\n            //计时器重置\n            this.deltaT -= this.bulletInterval;\n            //发射新子弹\n            this.shootNewBullet(this.bulletSpeedCoefficient, this.bulletSpeedIntercept, (this.T - this.T%this.bulletInterval), this.w);\n        }\n    },\n    onDisable: function () {\n        cc.director.getCollisionManager().enabled = false;\n        cc.director.getCollisionManager().enabledDebugDraw = false;\n    },\n    //生成新子弹的函数\n    shootNewBullet: function(speedCoefficient, speedIntercept, T, w) {\n        //子弹数组存储新子弹\n        this.newBullets[i] = cc.instantiate(this.bulletPrefab);\n        //将这颗新子弹作为Canvas的子节点\n        this.node.addChild(this.newBullets[i]);\n        //设置这颗子弹的初始速度\n        //var speedAndTheta = this.bulletRandomIsotropyInitializer(speedCoefficient, speedIntercept);\n        var speedAndTheta = this.bulletSpiralInitializer(speedIntercept, T, w);\n        this.newBullets[i].getComponent(\"bullet\").speed = speedAndTheta[0];\n        //设置这颗子弹的初始行进方向\n        this.newBullets[i].getComponent(\"bullet\").theta = speedAndTheta[1];\n        //设置这颗子弹的初始位置\n        this.newBullets[i].setPosition(cc.p(50 * Math.cos(speedAndTheta[1]), 50 * Math.sin(speedAndTheta[1])));\n    },\n\n    //返回子弹的初始速度与方向:\n    //随机各向同性子弹\n    bulletRandomIsotropyInitializer: function(speedCoefficient, speedIntercept ){\n        var speed = cc.random0To1() * speedCoefficient + speedIntercept;\n        var theta = cc.random0To1() * 2 * Math.PI;\n        return [speed, theta];\n    },\n    //螺旋子弹\n    bulletSpiralInitializer: function(speedIntercept, T, w) {\n        return[speedIntercept, T * w / Math.PI / 2]\n    }\n});\n"]}